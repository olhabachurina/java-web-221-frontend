import React, { useState } from "react";
import confetti from "canvas-confetti"; // –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏



const Signup = () => {
  const [name, setName] = useState("");
  const [login, setLogin] = useState("");
  const [emails, setEmails] = useState([""]);
  const [phones, setPhones] = useState([""]);
  const [city, setCity] = useState("");
  const [address, setAddress] = useState("");
  const [birthdate, setBirthdate] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  // –î–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º—ã
  const [responseMessage, setResponseMessage] = useState("");
  const [formErrors, setFormErrors] = useState({});

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const errors = {};
    if (!name) errors.name = "–Ü–º'—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º.";
    if (!login) errors.login = "–õ–æ–≥—ñ–Ω —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º.";
    if (emails.some((email) => !email.includes("@"))) {
      errors.emails = "–ö–æ–∂–µ–Ω email –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º.";
    }
    if (phones.some((phone) => phone.length < 10)) {
      errors.phones = "–ö–æ–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 10 —Ü–∏—Ñ—Ä.";
    }
    if (!city) errors.city = "–ú—ñ—Å—Ç–æ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º.";
    if (!address) errors.address = "–ê–¥—Ä–µ—Å–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é.";
    if (!birthdate) errors.birthdate = "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é.";
    if (!password || password.length < 6) {
      errors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤.";
    }
    if (password !== confirmPassword) {
      errors.confirmPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è.";
    }
    return errors;
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleRegistration = () => {
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }
    setFormErrors({});

    const userData = {
      name,
      login,
      emails,
      phones,
      city,
      address,
      birthdate,
      password
    };

    // üîé –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log("üîé [Registration] Current form data:");
    console.log("   name:", name);
    console.log("   login:", login);
    console.log("   emails:", emails);
    console.log("   phones:", phones);
    console.log("   city:", city);
    console.log("   address:", address);
    console.log("   birthdate:", birthdate);
    console.log("   password (len):", password.length); // –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º —Å–∞–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥, –Ω–æ –º–æ–∂–Ω–æ
    console.log("üîé –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π userData:", userData);

    const requestUrl = "http://localhost:8081/Java_Web_211_war/register";
    const requestOptions = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(userData),
    };

    console.log("üîé [Registration] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ fetch:", requestUrl, requestOptions);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    fetch(requestUrl, requestOptions)
      .then((response) => {
        console.log("üîé [Registration] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response); // –æ–±—ä–µ–∫—Ç Response
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        console.log("‚úÖ [Registration] JSON-–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
        setResponseMessage(data.message || "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!");

        // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—Ö
        if (typeof confetti === "function") {
          confetti(); // –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ üéâ
        }
      })
      .catch((error) => {
        console.error("‚ùå [Registration] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
        setResponseMessage("–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –î–µ—Ç–∞–ª—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞.");
      });
  };

  return (
    <div style={styles.container}>
      <h1 style={styles.heading}>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h1>

      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="–Ü–º'—è"
        style={styles.input}
      />
      {formErrors.name && <p style={styles.error}>{formErrors.name}</p>}

      <input
        type="text"
        value={login}
        onChange={(e) => setLogin(e.target.value)}
        placeholder="–õ–æ–≥—ñ–Ω"
        style={styles.input}
      />
      {formErrors.login && <p style={styles.error}>{formErrors.login}</p>}

      <h3 style={styles.subHeading}>–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –∞–¥—Ä–µ—Å–∏:</h3>
      {emails.map((email, index) => (
        <div key={index} style={styles.row}>
          <input
            type="email"
            value={email}
            onChange={(e) => {
              const newEmails = [...emails];
              newEmails[index] = e.target.value;
              setEmails(newEmails);
            }}
            placeholder="Email"
            style={styles.input}
          />
          <button
            onClick={() => setEmails(emails.filter((_, i) => i !== index))}
            style={styles.removeButton}
          >
            -
          </button>
        </div>
      ))}
      <button
        onClick={() => setEmails([...emails, ""])}
        style={styles.addButton}
      >
        + –î–æ–¥–∞—Ç–∏ email
      </button>

      <h3 style={styles.subHeading}>–¢–µ–ª–µ—Ñ–æ–Ω–∏:</h3>
      {phones.map((phone, index) => (
        <div key={index} style={styles.row}>
          <input
            type="text"
            value={phone}
            onChange={(e) => {
              const newPhones = [...phones];
              newPhones[index] = e.target.value;
              setPhones(newPhones);
            }}
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            style={styles.input}
          />
          <button
            onClick={() => setPhones(phones.filter((_, i) => i !== index))}
            style={styles.removeButton}
          >
            -
          </button>
        </div>
      ))}
      <button
        onClick={() => setPhones([...phones, ""])}
        style={styles.addButton}
      >
        + –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
      </button>

      <input
        type="text"
        value={city}
        onChange={(e) => setCity(e.target.value)}
        placeholder="–ú—ñ—Å—Ç–æ"
        style={styles.input}
      />
      {formErrors.city && <p style={styles.error}>{formErrors.city}</p>}

      <input
        type="text"
        value={address}
        onChange={(e) => setAddress(e.target.value)}
        placeholder="–ê–¥—Ä–µ—Å–∞"
        style={styles.input}
      />
      {formErrors.address && <p style={styles.error}>{formErrors.address}</p>}

      <input
        type="date"
        value={birthdate}
        onChange={(e) => setBirthdate(e.target.value)}
        style={styles.input}
      />
      {formErrors.birthdate && <p style={styles.error}>{formErrors.birthdate}</p>}

      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="–ü–∞—Ä–æ–ª—å"
        style={styles.input}
      />
      {formErrors.password && <p style={styles.error}>{formErrors.password}</p>}

      <input
        type="password"
        value={confirmPassword}
        onChange={(e) => setConfirmPassword(e.target.value)}
        placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –ø–∞—Ä–æ–ª—å"
        style={styles.input}
      />
      {formErrors.confirmPassword && <p style={styles.error}>{formErrors.confirmPassword}</p>}

      <button onClick={handleRegistration} style={styles.button}>
        –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
      </button>

      {responseMessage && <p style={styles.response}>{responseMessage}</p>}
    </div>
  );
};


// –°—Ç–∏–ª–∏
const styles = {
  container: { display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", minHeight: "100vh", backgroundColor: "#121212", color: "#ffffff", padding: "20px" },
  heading: { fontSize: "2rem", color: "#61dafb", marginBottom: "20px" },
  input: { width: "300px", padding: "10px", margin: "10px 0", borderRadius: "5px", border: "1px solid #444", backgroundColor: "#1e1e1e", color: "#ffffff" },
  button: { backgroundColor: "#61dafb", color: "#121212", padding: "10px 20px", borderRadius: "5px", cursor: "pointer", marginTop: "20px" },
  error: { color: "#f44336", fontSize: "12px" },
  response: { color: "#4caf50", marginTop: "20px" },
};

export default Signup;