import React, { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { AppContext } from "../AppContext";
import "./Admin.css";

export default function Admin() {
  const { user, token } = useContext(AppContext);
  const navigate = useNavigate();

  const [categories, setCategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [sortType, setSortType] = useState("default");

  const BASE_URL = "http://localhost:8081/Java_Web_211_war";

  
  useEffect(() => {
    console.log("üîß [Admin Init] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...");
    if (!user || !token) {
      console.warn("üö´ [Admin Init] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π! –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ /signin");
      navigate("/signin");
      return;
    }

    if (user.role !== "ADMIN") {
      console.warn("üö´ [Admin Init] –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º! –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ /");
      navigate("/");
      return;
    }

    console.log("‚úÖ [Admin Init] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ...");
    fetchCategories();
    fetchProducts();
  }, [user, token, navigate]);

  
  const fetchCategories = async () => {
    setLoading(true);
    console.log("üîÑ [fetchCategories] –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...");
    try {
      const res = await fetch(`${BASE_URL}/products?type=categories`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log(`[fetchCategories] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${res.status}`);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);

      const data = await res.json();
      console.log("‚úÖ [fetchCategories] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", data);

      setCategories(data);
      setMessage("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
    } catch (error) {
      console.error("‚ùå [fetchCategories] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", error);
      setMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.");
    } finally {
      setLoading(false);
    }
  };

  
  const fetchProducts = async () => {
    setLoading(true);
    console.log("üîÑ [fetchProducts] –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...");
    try {
      const res = await fetch(`${BASE_URL}/products`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log(`[fetchProducts] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${res.status}`);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);

      const data = await res.json();
      console.log("‚úÖ [fetchProducts] –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–≤–∞—Ä–∏:", data);

      setProducts(data);
      setMessage("‚úÖ –¢–æ–≤–∞—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
    } catch (error) {
      console.error("‚ùå [fetchProducts] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:", error);
      setMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏.");
    } finally {
      setLoading(false);
    }
  };

  
  const addProduct = async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);

    console.log("üìù [addProduct] –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –¥–∞–Ω–∏–º–∏:");
    formData.forEach((value, key) => {
      console.log(`   ${key}:`, value);
    });

    try {
      const res = await fetch(`${BASE_URL}/products`, {
        method: "POST",
        headers: { Authorization: `Bearer ${token}` }, 
        body: formData,
      });

      console.log(`[addProduct] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${res.status}`);

      const result = await res.json();
      console.log("‚úÖ [addProduct] –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:", result);

      if (result.status === "success") {
        setMessage("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
        form.reset();
        fetchProducts();
      } else {
        setMessage(result.message || "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä.");
      }
    } catch (error) {
      console.error("‚ùå [addProduct] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É:", error);
      setMessage("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.");
    }
  };

  
  const sortedProducts = () => {
    console.log("üîΩ [sortedProducts] –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", sortType);
    let sorted = [...products];

    switch (sortType) {
      case "price_asc":
        sorted.sort((a, b) => a.price - b.price);
        break;
      case "price_desc":
        sorted.sort((a, b) => b.price - a.price);
        break;
      case "name_asc":
        sorted.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case "name_desc":
        sorted.sort((a, b) => b.name.localeCompare(a.name));
        break;
      default:
        console.log("‚ö†Ô∏è [sortedProducts] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è");
    }

    return sorted;
  };

  
  return (
    <div className="admin-panel">
      <h1 className="title">üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>

      {message && <div className="message">{message}</div>}

      {/* –ö–ê–¢–ï–ì–û–†–Ü–á */}
      <section className="block categories">
        <h2>üìÅ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h2>
        {loading && <p>‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>}

        <div className="grid">
          {categories.length > 0 ? (
            categories.map((c) => (
              <div key={c.categoryId} className="card category">
                <img
                  src={`${BASE_URL}/storage/${c.categoryImageId}`}
                  alt={c.categoryTitle}
                />
                <p>{c.categoryTitle}</p>
              </div>
            ))
          ) : (
            <p>ü§∑‚Äç‚ôÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ–º–∞—î</p>
          )}
        </div>
      </section>

      {/* –î–û–î–ê–¢–ò –¢–û–í–ê–† */}
      <section className="block add-product">
        <h2>‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç</h2>
        <form onSubmit={addProduct} className="form" encType="multipart/form-data">
          <input name="name" placeholder="–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É" required />
          <textarea name="description" placeholder="–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É" required />
          <input name="price" type="number" placeholder="–¶—ñ–Ω–∞" required />
          <input name="stock" type="number" placeholder="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ" required />
          <input name="code" placeholder="–ö–æ–¥ —Ç–æ–≤–∞—Ä—É" required />
          <input name="file1" type="file" accept="image/*" required />

          <select name="categoryId" required>
            <option value="">üóÇÔ∏è –û–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</option>
            {categories.map((c) => (
              <option key={c.categoryId} value={c.categoryId}>
                {c.categoryTitle}
              </option>
            ))}
          </select>

          <button type="submit" className="btn-submit">üöÄ –î–æ–¥–∞—Ç–∏</button>
        </form>
      </section>

      {/* –¢–û–í–ê–†–ò */}
      <section className="block products">
        <h2>üõçÔ∏è –¢–æ–≤–∞—Ä–∏</h2>

        <div className="sort-block">
          <label>üîΩ –°–æ—Ä—Ç—É–≤–∞—Ç–∏: </label>
          <select value={sortType} onChange={(e) => setSortType(e.target.value)}>
            <option value="default">–ë–µ–∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</option>
            <option value="price_asc">–¶—ñ–Ω–∞ ‚Üë</option>
            <option value="price_desc">–¶—ñ–Ω–∞ ‚Üì</option>
            <option value="name_asc">–ù–∞–∑–≤–∞ A-Z</option>
            <option value="name_desc">–ù–∞–∑–≤–∞ Z-A</option>
          </select>
        </div>

        {loading ? (
          <p>‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤...</p>
        ) : sortedProducts().length === 0 ? (
          <p>ü§∑‚Äç‚ôÄÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î!</p>
        ) : (
          <div className="grid">
            {sortedProducts().map((p) => (
              <div key={p.productId} className="card product">
                <img
                  src={`${BASE_URL}/storage/${p.imageId}`}
                  alt={p.name}
                />
                <div className="info">
                  <h3>{p.name}</h3>
                  <p>üí∞ {p.price} –≥—Ä–Ω</p>
                  <p>üì¶ {p.stock} —à—Ç.</p>
                  <p>üè∑Ô∏è –ö–æ–¥: {p.code}</p>
                </div>
              </div>
            ))}
          </div>
        )}
      </section>
    </div>
  );
}