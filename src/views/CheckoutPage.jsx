import React, { useState, useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { CartContext } from "./Cartcontext/CartContext";
import { ThemeContext } from "../ThemeContext";
import { AppContext } from "../AppContext";

const BASE_URL = "http://localhost:8081/Java_Web_211_war";

export default function CheckoutPage() {
  const { user, token } = useContext(AppContext);
  const { cartItems, totalPrice, clearCart } = useContext(CartContext);
  const { theme } = useContext(ThemeContext);
  const navigate = useNavigate();

  const [orderDetails, setOrderDetails] = useState({
    name: "",
    address: "",
    phone: "",
  });

  const [isSubmitted, setIsSubmitted] = useState(false);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  useEffect(() => {
    if (!user) {
      console.warn("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /signin");
      navigate("/signin");
    }
  }, [user, navigate]);

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º—É
  useEffect(() => {
    if (user) {
      setOrderDetails({
        name: user.name || "",
        address: user.address || "",
        phone: user.phone || "",
      });
    }
  }, [user]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setOrderDetails((prev) => ({
      ...prev,
      [name]: value,
    }));
    console.log(`‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ ${name}:`, value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    if (!orderDetails.name || !orderDetails.address || !orderDetails.phone) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
      return;
    }

    if (!cartItems || cartItems.length === 0) {
      alert("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
      return;
    }

    try {
      const orderPayload = {
        customer: orderDetails,
        items: cartItems,
        total: totalPrice,
      };

      console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", orderPayload);

      const res = await fetch(`${BASE_URL}/orders`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        credentials: "include", 
        body: JSON.stringify(orderPayload),
      });

      if (!res.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞! –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${res.status}`);
        throw new Error(`–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (${res.status})`);
      }

      const data = await res.json();
      console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω:", data);

      setIsSubmitted(true);
      clearCart();

      setTimeout(() => {
        navigate("/order-confirmation");
      }, 3000);

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
    }
  };

  return (
    <div style={{ padding: "20px", ...styles(theme).container }}>
      <h1 style={styles(theme).title}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
      {isSubmitted ? (
        <div>
          <p style={styles(theme).text}>
            –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
          </p>
        </div>
      ) : (
        <form onSubmit={handleSubmit} style={styles(theme).form}>
          <div style={styles(theme).formGroup}>
            <label style={styles(theme).label}>–ò–º—è:</label>
            <input
              type="text"
              name="name"
              value={orderDetails.name}
              onChange={handleChange}
              style={styles(theme).input}
              required
            />
          </div>
          <div style={styles(theme).formGroup}>
            <label style={styles(theme).label}>–ê–¥—Ä–µ—Å:</label>
            <input
              type="text"
              name="address"
              value={orderDetails.address}
              onChange={handleChange}
              style={styles(theme).input}
              required
            />
          </div>
          <div style={styles(theme).formGroup}>
            <label style={styles(theme).label}>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
            <input
              type="text"
              name="phone"
              value={orderDetails.phone}
              onChange={handleChange}
              style={styles(theme).input}
              required
            />
          </div>
          <div style={styles(theme).summary}>
            <p style={styles(theme).text}>–û–±—â–∞—è —Å—É–º–º–∞: {totalPrice} –≥—Ä–Ω</p>
          </div>
          <button type="submit" style={styles(theme).checkoutBtn}>
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
          </button>
        </form>
      )}
    </div>
  );
}

const styles = (theme) => ({
  container: {
    backgroundColor: theme === "dark" ? "#333" : "#fff",
    color: theme === "dark" ? "#fff" : "#333",
    borderRadius: "8px",
    maxWidth: "500px",
    margin: "0 auto",
  },
  title: {
    textAlign: "center",
    marginBottom: "20px",
  },
  form: {
    display: "flex",
    flexDirection: "column",
  },
  formGroup: {
    marginBottom: "15px",
  },
  label: {
    marginBottom: "5px",
    display: "block",
  },
  input: {
    padding: "10px",
    fontSize: "16px",
    borderRadius: "4px",
    border: "1px solid #ccc",
  },
  summary: {
    marginTop: "20px",
  },
  text: {
    fontSize: "16px",
  },
  checkoutBtn: {
    padding: "12px",
    fontSize: "16px",
    backgroundColor: "#4CAF50",
    color: "#fff",
    border: "none",
    borderRadius: "4px",
    cursor: "pointer",
  },
});

/*const styles = (theme) => ({
  container: {
    maxWidth: "600px",
    margin: "0 auto",
    backgroundColor: theme.background,
    color: theme.text,
    padding: "20px",
    borderRadius: "8px",
    boxShadow: "0 2px 5px rgba(0,0,0,0.1)",
  },
  title: {
    textAlign: "center",
    marginBottom: "20px",
  },
  text: {
    fontSize: "16px",
    marginBottom: "10px",
  },
  form: {
    display: "flex",
    flexDirection: "column",
  },
  formGroup: {
    marginBottom: "15px",
  },
  label: {
    marginBottom: "5px",
    fontWeight: "bold",
    display: "block",
  },
  input: {
    padding: "10px",
    fontSize: "16px",
    borderRadius: "4px",
    border: "1px solid #ccc",
    width: "100%",
  },
  summary: {
    marginBottom: "20px",
  },
  checkoutBtn: {
    padding: "10px 20px",
    fontSize: "16px",
    backgroundColor: theme.buttonBackground,
    color: theme.buttonText,
    border: "none",
    borderRadius: "4px",
    cursor: "pointer",
  },
});
*/